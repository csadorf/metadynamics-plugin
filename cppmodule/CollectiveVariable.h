#ifndef __COLLECTIVE_VARIABLE_H__
#define __COLLECTIVE_VARIABLE_H__

/*! \file CollectiveVariable.h
    \brief Declares the CollectiveVariable abstract class
 */

#include <hoomd/hoomd.h>

#include <string.h>

/*! Abstract interface for a collective variable
 
    All C++ implementations of collective variables inherit from this class.
    A CollectiveVariable is an extension of a ForceCompute,
    and can compute forces.

    The force generated by a collective variable (i.e. its negative derivative
    with respect to particle positions) must be multiplied
    by a bias factor (the partial derivative of the biasing potential with
    respect to the collective variable). The bias factor is set using
    the method setBiasFactor().

    Collective variables should have a potential energy of zero,
    since they are not directly added to the Hamiltonian (only via the
    biasing potential). Instead, the value of the collective variable
    can be queried using getCurrentValue().

 */
class CollectiveVariable : public ForceCompute
    {
    public:
        /*! Constructs a collective variable
            \param sysdef The system definition
            \param name The name of this collective variable
         */
        CollectiveVariable(boost::shared_ptr<SystemDefinition> sysdef, const std::string& name);
        virtual ~CollectiveVariable() {}

        /*! Compute the forces for this collective variable.
            The force that is written to the force arrays must be
            multiplied by the bias factor.

            \param timestep The current value of the time step
         */
        virtual void computeForces(unsigned int timestep) = 0;

        /*! Returns the current value of the collective variable
         *  \param timestep The currnt value of the timestep
         */
        virtual Scalar getCurrentValue(unsigned int timestep) = 0;

        /*! Set the current value of the bias factor.
            This routine has to be called before force evaluation
            by the integrator.

            \param bias The value that multiplies the force
         */
        virtual void setBiasFactor(Scalar bias)
            {
            m_bias = bias;
            }

        /*! Returns the name of the collective variable
         */
        std::string getName()
            {
            return m_cv_name;
            }

    protected:
        Scalar m_bias;

        std::string m_cv_name;
    };

//! Export the CollectiveVariable class to python
void export_CollectiveVariable();

#endif // __COLLECTIVE_VARIABLE_H__
